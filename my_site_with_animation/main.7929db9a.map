{"version":3,"sources":["bideo.js","main.js"],"names":["global","Bideo","opt","videoEl","approxLoadingRate","_resize","_progress","startTime","onLoadCalled","init","self","resize","bind","addEventListener","isMobile","onLoad","autoplay","play","Date","getTime","src","forEach","srcOb","i","arr","key","val","source","document","createElement","hasOwnProperty","setAttribute","appendChild","playButton","pauseButton","style","display","pause","body","w","videoWidth","h","videoHeight","videoRatio","toFixed","container","containerStyles","getComputedStyle","minW","parseInt","getPropertyValue","minH","paddingTop","paddingBottom","paddingLeft","paddingRight","widthRatio","heightRatio","new_width","new_height","Math","ceil","width","height","window","bv","querySelector","matchMedia","matches","type"],"mappings":"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","file":"main.7929db9a.map","sourceRoot":"..","sourcesContent":["/**\n * Full Background Video\n *\n * More info on Audio/Video Media Events/Attributes/Methods\n * - https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\n * - http://www.w3schools.com/tags/ref_av_dom.asp\n */\n\n(function (global) {\n\n  // Define Bideo constructor on the global object\n  global.Bideo = function () {\n\n    // Plugin options\n    this.opt = null;\n    // The Video element\n    this.videoEl = null;\n\n    // Approximate Loading Rate\n    //\n    // The value will be a number like 0.8\n    // which means to load 4 seconds of the video\n    // it takes 5 seconds. If the number is super low\n    // like 0.2 (regular 3g connections) then you can\n    // decide whether to play the video or not.\n    // This behaviour will be controller with\n    // the `acceptableLoadingRate` option.\n    this.approxLoadingRate = null;\n\n    // Methods to which `this` will be bound\n    this._resize = null;\n    this._progress = null;\n\n    // Time at which video is initialized\n    this.startTime = null;\n\n    this.onLoadCalled = false;\n\n    // Initialize and setup the video in DOM`\n    this.init = function (opt) {\n      // If not set then set to an empty object\n      this.opt = opt = opt || {};\n\n      var self = this;\n\n      self._resize = self.resize.bind(this);\n\n      // Video element\n      self.videoEl = opt.videoEl;\n\n      // Meta data event\n      self.videoEl.addEventListener('loadedmetadata', self._resize, false);\n\n      // Fired when enough has been buffered to begin the video\n      // self.videoEl.readyState === 4 (HAVE_ENOUGH_DATA)\n      self.videoEl.addEventListener('canplay', function () {\n        // Play the video when enough has been buffered\n        if (!self.opt.isMobile) {\n          self.opt.onLoad && self.opt.onLoad();\n          if (self.opt.autoplay !== false) self.videoEl.play();\n        }\n      });\n\n      // If resizing is required (resize video as window/container resizes)\n      if (self.opt.resize) {\n        global.addEventListener('resize', self._resize, false);\n      }\n\n      // Start time of video initialization\n      this.startTime = (new Date()).getTime();\n\n      // Create `source` for video\n      this.opt.src.forEach(function (srcOb, i, arr) {\n        var key\n          , val\n          , source = document.createElement('source');\n\n        // Set all the attribute key=val supplied in `src` option\n        for (key in srcOb) {\n          if (srcOb.hasOwnProperty(key)) {\n            val = srcOb[key];\n\n            source.setAttribute(key, val);\n          }\n        }\n\n        self.videoEl.appendChild(source);\n      });\n\n      if (self.opt.isMobile) {\n        if (self.opt.playButton) {\n          self.opt.videoEl.addEventListener('timeupdate', function () {\n            if (!self.onLoadCalled) {\n              self.opt.onLoad && self.opt.onLoad();\n              self.onLoadCalled = true;\n            }\n          });\n\n\n          self.opt.playButton.addEventListener('click', function () {\n            self.opt.pauseButton.style.display = 'inline-block';\n            this.style.display = 'none';\n\n            self.videoEl.play();\n          }, false);\n\n          self.opt.pauseButton.addEventListener('click', function () {\n            this.style.display = 'none';\n            self.opt.playButton.style.display = 'inline-block';\n\n            self.videoEl.pause();\n          }, false);\n        }\n      }\n\n      return;\n    }\n\n    // Called once video metadata is available\n    //\n    // Also called when window/container is resized\n    this.resize = function () {\n      // IE/Edge still don't support object-fit: cover\n      if ('object-fit' in document.body.style) return;\n\n      // Video's intrinsic dimensions\n      var w = this.videoEl.videoWidth\n        , h = this.videoEl.videoHeight;\n\n      // Intrinsic ratio\n      // Will be more than 1 if W > H and less if H > W\n      var videoRatio = (w / h).toFixed(2);\n\n      // Get the container DOM element and its styles\n      //\n      // Also calculate the min dimensions required (this will be\n      // the container dimentions)\n      var container = this.opt.container\n        , containerStyles = global.getComputedStyle(container)\n        , minW = parseInt( containerStyles.getPropertyValue('width') )\n        , minH = parseInt( containerStyles.getPropertyValue('height') );\n\n      // If !border-box then add paddings to width and height\n      if (containerStyles.getPropertyValue('box-sizing') !== 'border-box') {\n        var paddingTop = containerStyles.getPropertyValue('padding-top')\n          , paddingBottom = containerStyles.getPropertyValue('padding-bottom')\n          , paddingLeft = containerStyles.getPropertyValue('padding-left')\n          , paddingRight = containerStyles.getPropertyValue('padding-right');\n\n        paddingTop = parseInt(paddingTop);\n        paddingBottom = parseInt(paddingBottom);\n        paddingLeft = parseInt(paddingLeft);\n        paddingRight = parseInt(paddingRight);\n\n        minW += paddingLeft + paddingRight;\n        minH += paddingTop + paddingBottom;\n      }\n\n      // What's the min:intrinsic dimensions\n      //\n      // The idea is to get which of the container dimension\n      // has a higher value when compared with the equivalents\n      // of the video. Imagine a 1200x700 container and\n      // 1000x500 video. Then in order to find the right balance\n      // and do minimum scaling, we have to find the dimension\n      // with higher ratio.\n      //\n      // Ex: 1200/1000 = 1.2 and 700/500 = 1.4 - So it is best to\n      // scale 500 to 700 and then calculate what should be the\n      // right width. If we scale 1000 to 1200 then the height\n      // will become 600 proportionately.\n      var widthRatio = minW / w;\n      var heightRatio = minH / h;\n\n      // Whichever ratio is more, the scaling\n      // has to be done over that dimension\n      if (widthRatio > heightRatio) {\n        var new_width = minW;\n        var new_height = Math.ceil( new_width / videoRatio );\n      }\n      else {\n        var new_height = minH;\n        var new_width = Math.ceil( new_height * videoRatio );\n      }\n\n      this.videoEl.style.width = new_width + 'px';\n      this.videoEl.style.height = new_height + 'px';\n    };\n\n  };\n\n}(window));\n","import {} from './bideo';\n\n\n(function () {\n\n  var bv = new Bideo();\n  bv.init({\n    // Video element\n    videoEl: document.querySelector('#background_video'),\n\n    // Container element\n    container: document.querySelector('body'),\n\n    // Resize\n    resize: true,\n\n    // autoplay: false,\n\n    isMobile: window.matchMedia('(max-width: 768px)').matches,\n\n    playButton: document.querySelector('#play'),\n    pauseButton: document.querySelector('#pause'),\n\n    // Array of objects containing the src and type\n    // of different video formats to add\n    src: [\n      {\n        src: './night.mp4',\n        type: 'video/mp4'\n      },\n      {\n        src: './night.webm',\n        type: 'video/webm;codecs=\"vp8, vorbis\"'\n      }\n    ],\n\n    // What to do once video loads (initial frame)\n    onLoad: function () {\n      document.querySelector('#video_cover').style.display = 'none';\n    }\n  });\n}());\n"]}